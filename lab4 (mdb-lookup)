-bash-4.1$ cat mdb.h
/*
 * mdb.h
 */

#ifndef _MDB_H_
#define _MDB_H_

struct MdbRec {
    char name[16];
    char  msg[24];
};

#endif /* _MDB_H_ */
-bash-4.1$ cat mdb-lookup.c
#include "mdb.h"
#include "mylist.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main( int argc, char **argv){
    if(argc != 2){
        fprintf(stderr, "%s\n", "mdb-lookup requires a file name");
        exit(1);
    }

    char *filename = argv[1];
    FILE *fp = fopen(filename, "rb");
    if(fp == NULL){
        perror(filename);
        exit(1);
    }

    struct List lookList;
    initList(&lookList);

    //adds all rec to linked list
    struct MdbRec theRec;
    struct Node *n = NULL;

    while(fread(&theRec, sizeof(theRec), 1, fp) == 1){
        struct MdbRec *rec = (struct MdbRec *)malloc(sizeof(theRec));
        if(rec == NULL){
            perror("malloc returned NULL");
            exit(1);
        }

        memcpy(rec, &theRec, sizeof(theRec));
        n = addAfter(&lookList, n, rec);
    }

    if(ferror(fp)){
        perror("error reading file");
        exit(1);
    }

    printf("lookup: ");
    fflush(stdout);

    char buffer[1000];

    //actual lookup part

    while(fgets(buffer, sizeof(buffer), stdin) !=NULL){
        char lookFor[6];
        if(strlen(buffer) > 5){
            strncpy(lookFor, buffer, 5);
            lookFor[5] = '\0';
        }else{
            int size = strlen(buffer);
            strncpy(lookFor, buffer, size);
            lookFor[size - 1] = '\0';
        }

       // printf(lookFor);
       // printf("\n");

        struct Node *n = lookList.head;
        int lineNum = 1;

        while(n){
            struct MdbRec *input = n->data;
            char *title = strstr(input->name, lookFor);
            char *mess = strstr(input->msg, lookFor);

            if(title || mess){
                printf("%d: {%s} said {%s}\n", lineNum, input->name, input->msg);
            }

            n = n->next;
            lineNum++;
        }

        printf("\nlookup: ");
        fflush(stdout);
    }

    //freeing and closing file
    struct Node *cur = lookList.head;
    while(cur){
        cur = cur->next;
        free(popFront(&lookList));
    }


    fclose(fp);


    return 1;

}
